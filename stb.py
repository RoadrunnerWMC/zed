
import os, os.path
import struct


def analyzeStb(filename, data):
    # STB header
    magic, bom, three, fileLen, numSections = struct.unpack_from('<4sHHII', data)
    assert magic == b'STB\0'
    assert bom == 0xFEFF
    assert three == 3
    assert fileLen == len(data)

    # jstudio header
    magic, zero, hex_sixtyThousand = struct.unpack_from('<8sII', data, 0x10)
    assert magic == b'jstudio\0'
    assert zero == 0
    assert hex_sixtyThousand == 0x00060000

    # Sections
    fileOffs = 0x20
    for i in range(numSections):
        sectionLen, sectionMagic = struct.unpack_from('<I4s', data, fileOffs)
        sectionMagic = sectionMagic[::-1]

        if sectionMagic == b'JFVB':
            # Script
            fvbMagic, fvbBom, hex_oneHundred, fvbLen, numEntries = \
                struct.unpack_from('<4sHHII', data, fileOffs + 8)
            assert fvbMagic == b'FVB\0'
            assert fvbBom == 0xFEFF
            assert hex_oneHundred == 0x0100
            assert fvbLen == sectionLen - 8

            pointer2 = fileOffs + 0x18
            for j in range(numEntries):
                thingLen, something1, something2, something3 = struct.unpack_from('<IIHH', data, pointer2)

                if thingLen == 20:
                    assert (something1, something2, something3) == (2, 4, 1)
                    something4, something5 = struct.unpack_from('<II', data, pointer2 + 12)
                    assert something5 == 0

                    # All state here is contained within something4. All of it.

                else:
                    assert (something1, something2, something3) == (6, 8, 18)
                    something4, something5, innerEntriesLenPlus4, something7, numEntriesInner, something9, something10, something11 = \
                        struct.unpack_from('<II6H', data, pointer2 + 12)

                    assert something4 == 0
                    # something5's tend to come in groups; are too big to be offsets
                    assert something7 in [1, 21]
                    
                    assert numEntriesInner == (innerEntriesLenPlus4 - 4) / 12

                    if something7 == 1:
                        assert innerEntriesLenPlus4 == thingLen - 28
                        assert something9 == 0x3000
                        assert something10 == something11 == 0

                        for k in range(numEntriesInner):
                            A, B, C = struct.unpack_from('<iiI', data, pointer2 + 32 + 12 * k)

                    elif something7 == 21:
                        assert innerEntriesLenPlus4 == 4
                        assert something9 == 1
                        assert something10 == thingLen - 0x24
                        assert something11 == 1

                        numEntriesInner2, something12, something13 = \
                            struct.unpack_from('<HHI', data, pointer2 + 32)

                        assert numEntriesInner2 == (thingLen - 40) / 12
                        assert something12 == 0x3000
                        assert something13 == 0

                        for k in range(numEntriesInner2):
                            A, B, C = struct.unpack_from('<iiI', data, pointer2 + 40 + 12 * k)

                pointer2 += thingLen

        elif sectionMagic == b'JCMR':
            # Camera
            zero, nameLen = struct.unpack_from('<HH', data, fileOffs + 8)
            assert zero == 0
            name = data[fileOffs + 0x0C : fileOffs + 0x0C + nameLen - 1]
            assert name in [b'CAM', b'Cam', b'camera']

        elif sectionMagic == b'JACT':
            # Actor
            zero, nameLen = struct.unpack_from('<HH', data, fileOffs + 8)
            assert zero == 0
            name = data[fileOffs + 0x0C : fileOffs + 0x0C + nameLen - 1]

        elif sectionMagic == b'JPTC':
            # Particle (effect)
            zero, nameLen = struct.unpack_from('<HH', data, fileOffs + 8)
            name = data[fileOffs + 0x0C : fileOffs + 0x0C + nameLen - 1]

        elif sectionMagic == b'JSND':
            # Sound
            zero, nameLen = struct.unpack_from('<HH', data, fileOffs + 8)
            name = data[fileOffs + 0x0C : fileOffs + 0x0C + nameLen - 1]
            assert name in [b'BGM', b'SE']

        elif sectionMagic == b'JMSG':
            # Message
            zero, nameLen = struct.unpack_from('<HH', data, fileOffs + 8)
            name = data[fileOffs + 0x0C : fileOffs + 0x0C + nameLen - 1]
            assert name in [b'Message', b'message', b'MSG', b'Massage'] # YUP. Massage.

        elif sectionMagic == b'\xFF\xFF\xFF\xFF':
            # Environment/control
            zero, nameLen = struct.unpack_from('<HH', data, fileOffs + 8)
            name = data[fileOffs + 0x0C : fileOffs + 0x0C + nameLen - 1]
            assert name in [b'ENV', b'Control', b'Ctrl', b'control', b'cntrl']

        else:
            raise ValueError(f'Unknown STB section: {sectionMagic}')

        fileOffs += sectionLen


def main():
    """
    Automated testing script
    """
    for folder, subfolders, files in os.walk('Testing/stEvent/'):
        for file in files:
            if not file.endswith('.stb'):
                continue
            with open(os.path.join(folder, file), 'rb') as f:
                d = f.read()
            analyzeStb(file, d)

main()


# Used section lengths (raw, then sorted/deduplicated):
#
#
# JFVB
# 892, 7444, 4944, 21148, 80, 2488, 5400, 4144, 2328, 2500, 22152, 10268, 2692, 1276, 10148, 3228, 2328, 1372, 1316, 1260, 4852, 2536, 11640, 12192, 8344, 4476, 3124, 784, 11672, 1624, 1456, 2328, 12916, 4044, 1000, 2000, 9632, 18600, 1096, 2264, 2776, 4552, 1220, 3928, 2588, 3124
# [80, 784, 892, 1000, 1096, 1220, 1260, 1276, 1316, 1372, 1456, 1624, 2000, 2264, 2328, 2488, 2500, 2536, 2588, 2692, 2776, 3124, 3228, 3928, 4044, 4144, 4476, 4552, 4852, 4944, 5400, 7444, 8344, 9632, 10148, 10268, 11640, 11672, 12192, 12916, 18600, 21148, 22152]
#
# JFVB entries
# [20, 56, 68, 80, 92, 100, 104, 116, 124, 128, 136, 140, 152, 164, 172, 176, 188, 196, 200, 212, 224, 236, 248, 260, 272, 284, 292, 296, 304, 308, 320, 332, 344, 356, 364, 380, 392, 400, 404, 412, 416, 428, 440, 464, 500, 508, 524, 532, 536, 548, 560, 572, 584, 608, 632, 704, 716, 740, 752, 776, 824, 848, 896, 908, 932, 956, 1016, 1028, 1040, 1064, 1076, 1088, 1112, 1124, 1136, 1196, 1244, 1292, 1316, 1340, 1364, 1472, 1520, 1712, 1760, 2084, 2348, 2360, 3332, 3728]
#
#
# JCMR
# 76, 1124, 1028, 468, 76, 244, 428, 412, 188, 412, 1028, 1244, 412, 244, 2652, 544, 188, 244, 132, 188, 1124, 124, 860, 1700, 1084, 1240, 872, 76, 508, 244, 244, 188, 1124, 188, 160, 300, 300, 1236, 76, 468, 748, 1084, 300, 916, 636, 732
# [76, 124, 132, 160, 188, 244, 300, 412, 428, 468, 508, 544, 636, 732, 748, 860, 872, 916, 1028, 1084, 1124, 1236, 1240, 1244, 1700, 2652]
#
#
# JACT
# 44, 44, 544, 864, 104, 148, 800, 904, 1000, 452, 248, 196, 160, 288, 424, 232, 152, 256, 312, 132, 60, 208, 204, 68, 68, 68, 248, 56, 104, 108, 96, 188, 124, 80, 48, 116, 56, 80, 84, 96, 188, 124, 80, 48, 116, 276, 304, 364, 184, 104, 164, 188, 88, 120, 104, 624, 1624, 1312, 320, 152, 140, 124, 68, 152, 56, 228, 112, 60, 84, 896, 844, 884, 724, 384, 212, 192, 252, 136, 136, 124, 104, 104, 108, 96, 132, 56, 228, 56, 44, 84, 88, 60, 44, 88, 76, 60, 152, 308, 296, 52, 184, 424, 412, 52, 52, 76, 60, 108, 120, 112, 120, 104, 100, 60, 60, 60, 60, 60, 60, 120, 60, 108, 108, 108, 92, 108, 400, 388, 360, 200, 676, 332, 312, 108, 152, 152, 152, 260, 428, 980, 492, 220, 760, 64, 64, 712, 72, 72, 668, 192, 740, 80, 68, 628, 804, 532, 664, 284, 164, 1260, 676, 292, 764, 232, 44, 44, 208, 212, 296, 188, 88, 112, 184, 72, 228, 112, 60, 84, 132, 56, 228, 112, 60, 84, 72, 80, 84, 100, 380, 864, 312, 568, 280, 356, 268, 120, 140, 168, 136, 56, 136, 204, 204, 204, 204, 116, 44, 88, 128, 88, 48, 184, 188, 164, 180, 164, 164, 668, 744, 132, 60, 252, 136, 420, 216, 236, 104, 104, 104, 144, 88, 140, 44, 384, 264, 148, 208, 160, 164, 412, 104, 432, 316, 236, 264, 96, 956, 576, 656, 284, 132, 504, 112, 112, 112, 112, 112, 92, 92, 100, 248, 244, 864, 208, 184, 1004, 392, 136, 152, 88, 88, 280, 372, 240, 588, 740, 556, 300
# [44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 160, 164, 168, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 228, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 276, 280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 332, 356, 360, 364, 372, 380, 384, 388, 392, 400, 412, 420, 424, 428, 432, 452, 492, 504, 532, 544, 556, 568, 576, 588, 624, 628, 656, 664, 668, 676, 712, 724, 740, 744, 760, 764, 800, 804, 844, 864, 884, 896, 904, 956, 980, 1000, 1004, 1260, 1312, 1624]
#
#
# JPTC
# 48, 48, 48, 48, 48, 92, 92, 92, 92, 92, 92, 76, 76, 80, 80, 80, 80, 80, 168, 80, 80, 80, 80, 88, 88, 88, 88, 88, 96, 96, 96, 88, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 96, 96, 96, 100, 100, 100, 100, 100, 100, 280, 280, 280, 280, 280, 108, 108, 108, 108, 48, 48, 48, 48, 48, 76, 76, 76, 76, 76, 76, 76, 68, 68, 68, 68, 68, 68, 88, 88, 88, 88, 48, 48, 48, 48, 48, 76, 76, 76, 76, 76, 76, 76, 88, 88, 88, 88, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 320, 52, 100, 52, 52, 96, 96, 52, 96, 96, 52, 96, 52, 96, 52, 52, 52, 84, 84, 84, 52, 52, 52, 52, 64, 64, 52, 52, 52, 52, 52, 52, 168, 84, 84, 84, 84, 84, 84, 84, 104, 104, 104, 104, 92, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 100, 100, 100, 100, 84, 48, 48, 48, 48, 48, 76, 76, 76, 76, 76, 76, 76, 88, 88, 88, 88, 52, 52, 52, 52, 52, 52, 52, 52, 52, 92, 92, 92, 100, 96, 96, 96, 96, 96, 96, 48, 48, 48, 48, 48, 92, 92, 92, 92, 92, 92, 96, 96, 96, 96, 96, 96, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 88, 88, 84, 84, 108, 108, 108, 120, 120, 120, 120, 120, 120, 116, 96, 96, 96, 104, 52, 52, 52, 84, 84, 84, 96, 88, 88, 100, 100, 100, 100, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 92, 88, 88, 80, 80, 80, 88, 92, 92, 100, 100, 100, 124, 124, 68, 100, 100, 92, 92, 104, 92, 48, 48, 48, 48, 88, 48, 48, 48, 48, 48, 92, 92, 92, 92, 92, 92, 152, 152, 152, 152, 152, 152, 152, 152, 152, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 100, 100, 100, 100, 100, 100, 52, 52, 96, 52, 96, 96, 52, 96, 96, 52, 96, 52, 52, 52, 52, 84, 84, 84, 52, 52, 96, 52, 96, 96, 52, 96, 96, 96, 52, 52, 52, 52, 52, 92, 92, 92, 100, 48, 48, 48, 48, 48, 76, 76, 76, 76, 76, 76, 76, 88, 88, 88, 88, 168, 168, 168, 176, 176, 88, 88, 88, 144, 144, 144, 144, 144, 144, 144, 144, 144, 68, 68, 68, 68, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 100, 100, 100, 100, 100, 96, 96, 92, 100, 100, 80, 64, 240, 240, 240, 240, 240, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 88, 88, 88, 76, 76, 76, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 356, 356, 348, 376, 376, 100, 100, 100, 100, 100, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 88, 88, 104, 104, 104, 52, 52, 88, 88, 88, 88, 88, 88, 88, 48, 48, 48, 48, 48, 92, 92, 92, 92, 92, 92, 44, 52, 52, 52, 48, 52, 52, 52, 52, 88, 88, 88, 88, 88, 88, 88, 100, 100, 100, 100, 112, 108, 108, 108, 108, 108, 108, 92, 148, 148, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 44, 44, 44, 44, 44, 44, 44, 44, 88, 88, 88, 92, 88, 88, 88, 100, 100, 100, 100
# [44, 48, 52, 64, 68, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 144, 148, 152, 168, 176, 240, 280, 320, 348, 356, 376]
#
#
# JSND
# 84, 216, 164, 140, 516, 724, 56, 240, 56, 40, 244, 204, 56, 40, 224, 104, 288, 156, 524, 56, 164, 56, 144, 72, 768, 304, 40, 204, 56, 56, 124, 56, 164, 124, 56, 132, 776, 56, 96, 96, 520, 196, 956, 172, 384, 112, 384, 44, 248, 84, 224, 56, 144, 56, 144, 204, 56, 120, 796, 56, 144, 40, 44, 40, 196, 164, 820, 84, 68, 416, 100, 356, 140, 404, 284, 248, 1152, 56, 260, 72, 576
# [40, 44, 56, 68, 72, 84, 96, 100, 104, 112, 120, 124, 132, 140, 144, 156, 164, 172, 196, 204, 216, 224, 240, 244, 248, 260, 284, 288, 304, 356, 384, 404, 416, 516, 520, 524, 576, 724, 768, 776, 796, 820, 956, 1152]
#
#
# JMSG
# 308, 364, 104, 64, 108, 784, 348, 44, 124, 256, 428, 172, 324, 448, 188, 44, 188, 92, 196, 288, 76, 284, 152, 440
# [44, 64, 76, 92, 104, 108, 124, 152, 172, 188, 196, 256, 284, 288, 308, 324, 348, 364, 428, 440, 448, 784]
#
#
# FFFFFFFF
# 76, 204, 524, 636, 672, 156, 60, 88, 112, 76, 136, 72, 76, 136, 116, 60, 336, 1328, 76, 72, 76, 268, 916, 76, 24, 72, 76, 24, 76, 76, 76, 164, 24, 156, 164, 444, 176, 24, 236, 184, 604, 212, 960, 324, 436, 24, 76, 124, 356, 24, 76, 24, 76, 72, 76, 152, 996, 124, 24, 136, 24, 84, 136, 668, 76, 432, 108, 148, 552, 180, 608, 96, 288, 1196, 188, 152, 288, 212
# [24, 60, 72, 76, 84, 88, 96, 108, 112, 116, 124, 136, 148, 152, 156, 164, 176, 180, 184, 188, 204, 212, 236, 268, 288, 324, 336, 356, 432, 436, 444, 524, 552, 604, 608, 636, 668, 672, 916, 960, 996, 1196, 1328]